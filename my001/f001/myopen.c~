#include	"unp.h"

int
my_open(const char *pathname, int mode)
{
	int			fd, sockfd[2], status;
	pid_t		childpid;
	char		c, argsockfd[10], argmode[10];
	struct ucred cred;
	const int on = 1;
	socketpair(AF_LOCAL, SOCK_STREAM, 0, sockfd);
	if(setsockopt(sockfd[0], SOL_SOCKET, SO_PASSCRED, &on, sizeof(on)) < 0){
	  perror("setsockopt error");
	  exit(1);
	}
	if(setsockopt(sockfd[1], SOL_SOCKET, SO_PASSCRED, &on, sizeof(on)) < 0){
	  perror("setsockopt error");
	  exit(1);
	}
	
	
	if ( (childpid = fork()) == 0) {		/* child process */
	  close(sockfd[0]);
	  snprintf(argsockfd, sizeof(argsockfd), "%d", sockfd[1]);
	  snprintf(argmode, sizeof(argmode), "%d", mode);
	  execl("./openfile", "openfile", argsockfd, pathname, argmode,
		(char *) NULL);
	  perror("execl error");
	}

	/* parent process - wait for the child to terminate */
	close(sockfd[1]);			/* close the end we don't use */
	
	waitpid(childpid, &status, 0);
	if (WIFEXITED(status) == 0)
	  perror("child did not terminate");
	if ( (status = WEXITSTATUS(status)) == 0)
	  read_fd(sockfd[0], &c, 1, &fd, &cred);
	
	else {
	  errno = status;		/* set errno value from child's status */
	  fd = -1;
	}

	  printf("uid = %d\n gid = %d\n pid  %d\n", cred.uid, cred.gid, cred.pid);

	
	close(sockfd[0]);
	return(fd);
}
