#include "unp.h"
#include <fcntl.h>
#include <sys/mman.h>
#include <semaphore.h>

#define NLOOPS 1000
#define SIZE sizeof(long)

#define read_lock(fd, whence, start, len) lock_reg((fd), F_SETLK, F_RDLCK, (whence), (start), (len))
#define readw_lock(fd, whence, start, len) lock_reg((fd), F_SETLKW, F_RDLCK, (whence), (start), (len))
#define write_lock(fd, whence, start, len) lock_reg((fd), F_SETLK, F_WRLCK, (whence), (start), (len))
#define writew_lock(fd, whence, start, len) lock_reg((fd), F_SETLKW, F_WRLCK, (whence), (start), (len))
#define un_lock(fd, whence, start, len) lock_reg((fd), F_SETLK, F_UNLCK (whence) (start), (len))

#define is_read_lockable(fd, whence, start, len) (lock_test((fd), F_RDLCK, (whence), (len)) == 0)
#define is_write_lockable(fd, whence, start, len) (lock_test((fd), F_WRLCK, (whence), (len)) == 0)

pid_t
lock_test(int fd, int type, int whence, off_t start, off_t len){
  struct flock lock;
  lock.l_type = type;
  lock.l_whence = whence;
  lock.l_start = start;
  lock.l_len = len;
  
  if(fcntl(fd, F_GETLK, &lock) < 0){
    perror("fcntl");
    exit(1);
  }
  
  if(lock.l_type == F_UNLCK)
    return (0);
  
  return (lock.l_pid);
}

int
lock_reg(int fd, int cmd, int type, int whence, off_t start, off_t len){
  struct flock lock;

  lock.l_type = type;
  lock.l_whence = whence;
  lock.l_start = start;
  lock.l_len = len;
  
  return (fcntl(fd, cmd, &lock));
}
  
  






static void
lockabyte(const char *name, int fd, off_t offset)
{
  if(writew_lock(fd, SEEK_SET, offset, 1) < 0){
    perror("writew_lock");
    exit(1);
  }
  printf("%s: got the lock, byte %ld\n", name, offset);
}

int
lockfile(fd)
{
  struct flock lock;
  lock.l_type = F_WRLCK;
  lock.l_whence = SEEK_SET;
  lock.l_start = 0;
  lock.l_len = 0;
  
  return (fcntl(fd, F_SETLK, &lock));
}



static int fd;

void
TELL_WAIT(void){
  
  if((fd = open("/tmp/mytest", O_CREAT|O_EXCL, 0777)) < 0){
    err_quit("open");
  }
  
  if(lockfile(fd) < 0){
    err_quit("aaa");
  }
}

void TELL_PARENT(pid_t pid){
  un_lock(fd, SEEK_SET, 0, 0);
    
   
}

void TELL_CHILD(pid_t pid){
  un_lock(fd, SEEK_SET, 0, 0);
  
  
    
}

void WAIT_PARENT(void){
  if(lockfile(fd) < 0){
    err_quit("aaa");
  }
}

void WAIT_CHILD(void){
  if(lockfile(fd) < 0){
    err_quit("bbb");
  }
}
static int
update(long *ptr){
  return ((*ptr)++);
}


static void
print_char(char *str){
  char *ptr;
  int  c;
  
  setbuf(stdout, NULL);
  for(ptr = str; (c = *ptr) != 0; ptr++){
    putc(c, stdout);
  }
}
int
main(int argc, char *argv[])
{
  int fd, i,n, counter;
  pid_t pid;
  void *area;
  
  if((fd = open("/dev/zero", O_RDWR)) < 0){
    err_quit("open");
  }
  if((area = mmap(0, SIZE, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0)) == MAP_FAILED){
    err_quit("mmap");
  }
  close(fd);
  
  TELL_WAIT();
  if((pid = fork()) < 0){
    err_quit("fork");
  }else if(pid == 0){
    
    /*
    
    for(i = 1; i < NLOOPS + 1; i += 1){
      if((counter = update((long *)area)) != i){
	fprintf(stderr, "%d got %d\n", i, counter);
	err_quit("update child");
      }
    }
    
    
    */
    
    WAIT_PARENT();
    print_char("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    // TELL_PARENT(getppid());
    //  sleep(1);
  }else{
    /*
    sleep(1);
    
    for(i = 0; i < NLOOPS + 1; i += 1){
      if((counter = update((long *)area)) != i){
	fprintf(stderr, "%d got %d\n", i, counter);
	err_quit("update parent");
	}
    }



    */
    // WAIT_CHILD();
    print_char("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb");
    
    TELL_CHILD(pid);
  }
  
  exit(0);
}

